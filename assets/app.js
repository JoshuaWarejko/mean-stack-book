angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$location",function(t,e,n){t.$on("login",function(e,n){t.currentUser=n}),t.logout=function(){t.currentUser=void 0,e.logout()},t.changeView=function(t){n.path(t)}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("login",e.data),t.username=void 0,t.password=void 0})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.currentUser?t.postBody&&e.create({username:t.currentUser.username,textbody:t.postBody}).then(function(e){t.posts.unshift(e),t.postBody=null}):window.alert("Must be logged in to post!")},e.fetch().then(function(e){t.posts=e.data})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.register(n,o).then(function(e){t.$emit("login",e)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html.ejs"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html.ejs"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html.ejs"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return window.localStorage.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})},e.logout=function(){delete t.defaults.headers.common["X-Auth"]}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCIkbG9jYXRpb24iLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwibG9nb3V0IiwidW5kZWZpbmVkIiwiY2hhbmdlVmlldyIsInZpZXciLCJwYXRoIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlcyIsIiRlbWl0IiwiZGF0YSIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwidGV4dGJvZHkiLCJwb3N0IiwicG9zdHMiLCJ1bnNoaWZ0Iiwid2luZG93IiwiYWxlcnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsImxvY2FsU3RvcmFnZSIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFVBQUEsWUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBRixFQUFBRyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUwsRUFBQU0sWUFBQUQsSUFFQUwsRUFBQU8sT0FBQSxXQUNBUCxFQUFBTSxZQUFBRSxPQUNBUCxFQUFBTSxVQUVBUCxFQUFBUyxXQUFBLFNBQUFDLEdBQ0FSLEVBQUFTLEtBQUFELE9DVkFiLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUFBWSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FiLEVBQUFXLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FDQWhCLEVBQUFpQixNQUFBLFFBQUFELEVBQUFFLE1BQ0FsQixFQUFBYSxTQUFBTCxPQUNBUixFQUFBYyxTQUFBTixhQ1BBWCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQW1CLEdBS0FuQixFQUFBb0IsUUFBQSxXQUNBcEIsRUFBQU0sWUFFQU4sRUFBQXFCLFVBQ0FGLEVBQUFHLFFBQ0FULFNBQUFiLEVBQUFNLFlBQUFPLFNBQ0FVLFNBQUF2QixFQUFBcUIsV0FFQU4sS0FBQSxTQUFBUyxHQUNBeEIsRUFBQXlCLE1BQUFDLFFBQUFGLEdBQ0F4QixFQUFBcUIsU0FBQSxPQVJBTSxPQUFBQyxNQUFBLCtCQVlBVCxFQUFBVSxRQUNBZCxLQUFBLFNBQUFVLEdBQ0F6QixFQUFBeUIsTUFBQUEsRUFBQVAsVUN0QkFyQixRQUFBQyxPQUFBLE9BQ0FnQyxRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBSCxNQUFBLFdBQ0EsTUFBQUUsR0FBQUUsSUFBQSxlQUVBRCxLQUFBVixPQUFBLFNBQUFFLEdBQ0EsTUFBQU8sR0FBQVAsS0FBQSxhQUFBQSxPQ05BM0IsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUFBa0MsU0FBQSxTQUFBckIsRUFBQUMsR0FDQWIsRUFBQWlDLFNBQUFyQixFQUFBQyxHQUNBQyxLQUFBLFNBQUFWLEdBQ0FMLEVBQUFpQixNQUFBLFFBQUFaLFNDTEFSLFFBQUFDLE9BQUEsT0FDQXFDLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUFBdEMsV0FBQSxZQUFBdUMsWUFBQSxtQkFDQUQsS0FBQSxhQUFBdEMsV0FBQSxlQUFBdUMsWUFBQSxzQkFDQUQsS0FBQSxVQUFBdEMsV0FBQSxZQUFBdUMsWUFBQSxzQkNMQXpDLFFBQUFDLE9BQUEsT0FDQWdDLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQVEsR0FBQVAsSUFDQU8sR0FBQUMsUUFBQSxXQUNBLE1BQUFULEdBQUFFLElBQUEsZUFFQU0sRUFBQTNCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBaUIsR0FBQVAsS0FBQSxpQkFDQVgsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBMEIsR0FHQSxNQUZBZCxRQUFBZSxhQUFBQyxNQUFBRixFQUFBdkIsS0FDQWEsRUFBQWEsU0FBQUMsUUFBQUMsT0FBQSxVQUFBTCxFQUFBdkIsS0FDQXFCLEVBQUFDLGFBR0FELEVBQUFMLFNBQUEsU0FBQXJCLEVBQUFDLEdBQ0EsTUFBQWlCLEdBQUFQLEtBQUEsY0FDQVgsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxXQUNBLE1BQUF3QixHQUFBM0IsTUFBQUMsRUFBQUMsTUFHQXlCLEVBQUFoQyxPQUFBLGlCQUNBd0IsR0FBQWEsU0FBQUMsUUFBQUMsT0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuXHQnbmdSb3V0ZSdcbl0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjLCAkbG9jYXRpb24pIHtcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG5cdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcblx0fSk7XG5cdCRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG5cdFx0VXNlclN2Yy5sb2dvdXQoKTtcblx0fTtcblx0JHNjb3BlLmNoYW5nZVZpZXcgPSBmdW5jdGlvbih2aWV3KSB7XG5cdFx0JGxvY2F0aW9uLnBhdGgodmlldyk7XG5cdH1cbn0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclN2Yykge1xuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlcy5kYXRhKTtcblx0XHRcdCRzY29wZS51c2VybmFtZSA9IHVuZGVmaW5lZDtcblx0XHRcdCRzY29wZS5wYXNzd29yZCA9IHVuZGVmaW5lZDtcblx0XHR9KTtcblx0fTtcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQb3N0c1N2Yykge1xuXG5cdC8vICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXyx1c2VyKSB7XG5cdC8vIFx0JHNjb3BlLmN1cnJlbnRMb2dpbiA9IHVzZXI7XG5cdC8vIH0pO1xuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCEkc2NvcGUuY3VycmVudFVzZXIpIHtcblx0XHRcdHdpbmRvdy5hbGVydChcIk11c3QgYmUgbG9nZ2VkIGluIHRvIHBvc3QhXCIpO1xuXHRcdH0gZWxzZSBpZigkc2NvcGUucG9zdEJvZHkpIHtcblx0XHRcdFBvc3RzU3ZjLmNyZWF0ZSh7XG5cdFx0XHRcdHVzZXJuYW1lOiAkc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWUsXG5cdFx0XHRcdHRleHRib2R5OiAkc2NvcGUucG9zdEJvZHlcblx0XHRcdH0pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAocG9zdCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRQb3N0c1N2Yy5mZXRjaCgpXG5cdC50aGVuKGZ1bmN0aW9uKHBvc3RzKSB7XG5cdFx0JHNjb3BlLnBvc3RzID0gcG9zdHMuZGF0YTtcblx0fSk7XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdH07XG5cdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCkge1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdH07XG59KTsgIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgVXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcbiAgICB9KTtcbiAgfTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcdFxuXHQud2hlbignLycsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sLmVqcycgfSlcblx0LndoZW4oJy9yZWdpc3RlcicsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sLmVqcycgfSlcblx0LndoZW4oJy9sb2dpbicsIHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sLmVqcycgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcblx0dmFyIHN2YyA9IHRoaXM7XG5cdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xuXHR9O1xuXHRzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG5cdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHZhbC5kYXRhO1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGE7XG5cdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKTtcblx0XHR9KTtcblx0fTtcblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIH0pO1xuICB9O1xuICBzdmMubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gIFx0ZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXTtcbiAgfTtcbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
